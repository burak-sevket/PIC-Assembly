LIST P='16F877A'
INCLUDE "P16F877A.INC"
ADCON1 EQU h'9F' ;ANALOG DIGITAL CONVERTER  
DUTY EQU h'20'
FREE EQU h'21'
CNT EQU h'22'
CLRF PORTD

;CONFIG
BSF STATUS, 5 ;BANK 1
BSF TRISB, 7 ; INPUT STOP BUTTON
BSF TRISB, 4 ; INPUT SPEED BUTTON 
BCF TRISD, 1 ; OUTPUT MOTOR
BSF TRISC, 5 ; INPUT SLOWLY BUTTON
BSF TRISD, 2 ; INPUT START BUTTON
MOVLW h'06'
MOVWF ADCON1 ; Disable ADC
BCF STATUS, 5
;START

STOP
BTFSC PORTD, 2 ; CONTROL THE 2th BUTTON in PORTD, THIS IS START BUTTON
GOTO START
GOTO STOP

START
MOVLW h'05' ; STARTING WITH %50 SPEED
MOVWF DUTY	; DUTY=h'05'
MOVWF FREE	; FREE=h'05'

STARTING

BTFSC PORTB, 7 ; CONTROL THE 7th BUTTON in PORTB, THIS IS STOP BUTTON
GOTO STOP

BTFSC PORTC, 5 ;CONTROL THE 5th BUTTON in PORTC, THIS IS SLOWLY BUTTON
GOTO SLOWLY

BTFSC PORTB, 4 ; CONTROL THE 4th BUTTON in PORTB, THIS IS SPEED BUTTON
GOTO SPEED

GOTO PWM



SLOWLY
BTFSC PORTC, 5 ;If the button is held down it will stay in this loop.
GOTO SLOWLY

;We check that no more value can be reduced in the last stage of the slowdown.
;If it is in the last level, we use the ZeroBit concept, which is the 2nd bit of Status.
;If the result of the subtraction is "0", ZeroBit will return "1".
;This means that there can be no further slowing down.
;That's why we increase and decrease one time before subtraction.
MOVLW h'00'
SUBWF DUTY, W
BTFSS STATUS, 2 ;Zerobit control in the 2nd bank of Status.
GOTO SLOWLY2
BCF STATUS, 2 ; ZeroBitin that takes the value "1" resets the inside. Because the next step is to check the inside of the Zerobit correctly.
INCF DUTY, F ; We increase the inside of the duty register by one.
DECF FREE, F ; We decrease the inside of the free register by one.

SLOWLY2
DECF DUTY, F ; We decrease the inside of the duty register by one.
INCF FREE, F ;We increase the inside of the free register by one.
GOTO PWM

SPEED
BTFSC PORTB, 4 ;If the button is held down it will stay in this loop.
GOTO SPEED

;We check that no more value can be reduced in the last stage of the speed level.
;If it is in the last level, we use the ZeroBit concept, which is the 2nd bit of Status.
;If the result of the subtraction is "0", ZeroBit will return "1".
;This means that there can be no further speeding level.
;That's why we increase and decrease one time before subtraction.
MOVLW h'00'
SUBWF FREE, W
BTFSS STATUS, 2 ; Zerobit control in the 2nd bank of Status.
GOTO SPEED2
BCF STATUS, 2
DECF DUTY, F ; We decrease the inside of the duty register by one.
INCF FREE, F ; We increase the inside of the free register by one.

SPEED2
INCF DUTY, F ; We increase the inside of the duty register by one.
DECF FREE, F ; We decrease the inside of the free register by one.
GOTO PWM

PWM
BSF PORTD, 1 ; START THE MOTOR
MOVFW DUTY
;The values in the Duty and Free register are saved in the "W" register. Then we send the Speed_Level_Table with the value in the "W" register.
;PCL = Program Counter Line
;With this code, we keep the value of the line we are processing.
;Then, with the "W" register coming from the called place, the value in the PCL is collected by the ADDWF command. 
;Jump to the other line is performed as much as the result and the operation on that line is executed.
CALL SPEED_LEVEL_TABLE
CALL PWM_DELAY

BCF PORTD, 1 ; STOP THE MOTOR
MOVFW FREE
CALL SPEED_LEVEL_TABLE
CALL PWM_DELAY
GOTO STARTING

PWM_DELAY
MOVWF CNT ;The value in the "W" register coming from the table is recorded in the "CNT" register and the delay image for the signal is provided.
PWM_DELAYLOOP
DECFSZ CNT, F ;We want to make the delay we want to make assignments
GOTO PWM_DELAYLOOP
RETURN

SPEED_LEVEL_TABLE
ADDWF PCL,F ; Keep the value of the line PCL (05+115+1=78)
RETLW h'01' ; 01 - %01
RETLW h'1A' ; 26 - %10
RETLW h'33' ; 51 - %20
RETLW h'4D' ; 77 - %30
RETLW h'66' ; 102 - %40
RETLW h'80' ; 128 - %50 STARTING SPEED
RETLW h'9A' ; 154 - %60
RETLW h'B3' ; 179 - %70
RETLW h'CD' ; 205 - %80
RETLW h'E6' ; 230 - %90
RETLW h'FE' ; 254 - %99
END
